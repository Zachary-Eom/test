name: Weekly Commit Summary

on:
  schedule:
    - cron: '0 1 * * 1' # 매주 월요일 10:00 KST (UTC 기준 1시)
  workflow_dispatch:

jobs:
  summarize-and-notify-weekly:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set Date Range (Last Week)
        id: daterange
        run: |
          export TZ=Asia/Seoul
          START=$(date -d "last monday -7 days" +%Y-%m-%d)
          END=$(date -d "last monday" +%Y-%m-%d)
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=$END" >> $GITHUB_OUTPUT

      - name: Fetch commits from last week
        id: commits
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          START="${{ steps.daterange.outputs.start }}T00:00:00Z"
          END="${{ steps.daterange.outputs.end }}T00:00:00Z"

          echo "Fetching commits from $START to $END..."
          COMMITS=$(gh api repos/${{ github.repository }}/commits --paginate)

          MESSAGES=$(echo "$COMMITS" | jq -r --arg start "$START" --arg end "$END" \
            '[.[] | select(.commit.author.date >= $start and .commit.author.date < $end) | .commit.message] | join("\n")'
          )

          echo "messages<<EOF" >> $GITHUB_ENV
          echo "$MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Summarize with OpenAI
        id: summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Summarizing..."
          SUMMARY=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-3.5-turbo",
              "messages": [
                {
                  "role": "system",
                  "content": "너는 개발자의 커밋 메시지를 요약해주는 도우미야."
                },
                {
                  "role": "user",
                  "content": "다음은 지난 주의 커밋 메시지 목록이야. 누가 어느 브랜치에서 어떤 내용을 작업했는지를 기준으로, 날짜별로 정리해줘. 형식은 아래 예시처럼 고정해서 출력해줘. 강조 표시나 마크다운 없이, 순수 텍스트로만 출력해줘. 반드시 날짜 → 커밋 항목들 순으로 정리해줘:\n\n예시 형식:\n4월 16일 수요일\n- 작성자1 / 브랜치명 : 커밋 내용\n- 작성자2 / 브랜치명 : 커밋 내용\n\n4월 17일 목요일\n- 작성자1 / 브랜치명 : 커밋 내용\n\n이제 다음 커밋 메시지를 요약해줘:\n${{ env.messages }}"
                }
              ]
            }' | jq -r '.choices[0].message.content')

          echo "🧾 Summary result from OpenAI:"
          echo "$SUMMARY"

          echo "summary<<EOF" >> $GITHUB_ENV
          echo "$SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          echo "Sending summary to Slack..."
          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg channel "C08N4F3FWH1" \
              --arg text "*📚 주간 커밋 요약*" \
              --arg summary "${{ env.summary }}" \
              '{
                channel: $channel,
                text: $text,
                blocks: [
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: $text
                    }
                  },
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: $summary
                    }
                  }
                ]
              }')"
